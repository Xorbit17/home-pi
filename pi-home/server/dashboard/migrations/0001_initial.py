# Generated by Django 5.2.5 on 2025-08-26 08:10

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('kind', models.CharField(choices=[('CALENDAR', 'Get calendar'), ('RSS', 'Get RSS'), ('WEATHER', 'Get weather'), ('PUSH', 'Push to displays'), ('ART', 'Generate art'), ('NEWSPAPER', 'Generate newspaper'), ('CLASSIFY', 'Classify image'), ('MANUAL_TRIGGER', 'Manually triggered'), ('DUMMY', 'Dummy job to test the scheduler and the commands')], max_length=64)),
                ('job_type', models.CharField(choices=[('CRON', 'Triggered by chron'), ('MANUAL', 'Triggered manually')], max_length=64)),
                ('cron', models.CharField(help_text="Cron format, e.g. '0 5 * * *'", max_length=64, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('params', models.JSONField(blank=True, default=dict)),
                ('last_run_started_at', models.DateTimeField(blank=True, null=True)),
                ('last_run_finished_at', models.DateTimeField(blank=True, null=True)),
                ('last_run_status', models.CharField(choices=[('RUNNING', 'Running'), ('SUCCESS', 'Success'), ('SKIPPED', 'Skipped'), ('ERROR', 'Error'), ('QUEUED', 'Queued')], max_length=64, null=True)),
                ('last_run_message', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SourceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('classification', models.JSONField(default=None, null=True)),
                ('has_variants', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Execution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(default=None, null=True)),
                ('finished_at', models.DateTimeField(default=None, null=True)),
                ('runtime_ms', models.PositiveIntegerField(default=None, null=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('SUCCESS', 'Success'), ('SKIPPED', 'Skipped'), ('ERROR', 'Error'), ('QUEUED', 'Queued')], max_length=20)),
                ('summary', models.CharField(blank=True, default='', max_length=500)),
                ('error', models.TextField(blank=True, default='')),
                ('params', models.JSONField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='dashboard.job')),
            ],
        ),
        migrations.CreateModel(
            name='JobLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARN', 'Warning'), ('ERROR', 'Error')], db_index=True, default='INFO', max_length=10)),
                ('message', models.TextField()),
                ('context', models.JSONField(default=None, null=True)),
                ('seq', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='dashboard.execution')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
            options={
                'indexes': [models.Index(fields=['latitude', 'longitude'], name='dashboard_l_latitud_6e7793_idx')],
            },
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('at', models.DateTimeField(db_index=True)),
                ('generated_at', models.DateField(db_index=True)),
                ('time_label', models.TextField(max_length=100)),
                ('icon_main', models.CharField(choices=[('sunny', 'Sunny'), ('partly_cloudy', 'Partly cloudy'), ('cloudy', 'Cloudy'), ('rain', 'Rain'), ('showers', 'Showers'), ('thunder', 'Thunder'), ('fog', 'Fog'), ('snow', 'Snow'), ('windy', 'Windy')], default='sunny', max_length=20)),
                ('icon_transition', models.CharField(choices=[('sunny', 'Sunny'), ('partly_cloudy', 'Partly cloudy'), ('cloudy', 'Cloudy'), ('rain', 'Rain'), ('showers', 'Showers'), ('thunder', 'Thunder'), ('fog', 'Fog'), ('snow', 'Snow'), ('windy', 'Windy')], max_length=20, null=True)),
                ('temperature_c', models.DecimalField(decimal_places=1, max_digits=4)),
                ('precip_prob', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('wind_bft', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)])),
                ('wind_dir', models.CharField(choices=[('N', 'N'), ('NO', 'No'), ('O', 'O'), ('ZO', 'Zo'), ('Z', 'Z'), ('ZW', 'Zw'), ('W', 'W'), ('NW', 'Nw')], default='N', max_length=2)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.location')),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(default=None, null=True)),
                ('art_style', models.CharField(choices=[('KEEP_PHOTO', 'Keep the original'), ('COMMUNIST_POSTER', 'Communist Poster'), ('STUDIO_GHIBLI_STYLE', 'Studio Ghibli Style'), ('RETRO_PIXEL_ART', 'Retro Pixel Art'), ('POINTILLISM_HALFTONE', 'Pointillism / Halftone'), ('MARKER_DRAWING', 'Marker Drawing'), ('CUBISM_ABSTRACT_FACE', 'Cubism Abstract Face'), ('WARHOL_POP_ART', 'Warhol Pop Art'), ('WOODCUT_LINOCUT', 'Woodcut / Linocut'), ('MINIMAL_VECTOR_PORTRAIT', 'Minimal Vector Portrait'), ('CHILDRENS_BOOK_ILLUSTRATION', "Children's Book Illustration"), ('PIXAR_STYLE', 'Pixar Style'), ('DISNEY_CLASSIC', 'Disney Classic'), ('SPIDERVERSE_COMIC', 'Spiderverse Comic'), ('GRITTY_WESTERN_COMICS', 'Gritty Western Comics'), ('MOEBIUS_FRENCH_SCI_FI', 'Moebius (French Sci-Fi)'), ('COMIC_BOOK_VIGNETTE', 'Comic Book Vignette'), ('MANGA_DYNAMIC', 'Manga Dynamic'), ('GHIBLI_GROUP_SCENE', 'Ghibli Group Scene'), ('IMPRESSIONIST_BRUSHWORK', 'Impressionist Brushwork'), ('SILHOUETTE_COLOR_BLOCKS', 'Silhouette Color Blocks'), ('STENCIL_BANKSY_STYLE', 'Stencil (Banksy Style)'), ('INK_WATERCOLOR', 'Ink Watercolor'), ('RETRO_ZOO_POSTER', 'Retro Zoo Poster'), ('NATURALIST_SKETCH', 'Naturalist Sketch'), ('CARTOON_MASCOT', 'Cartoon Mascot'), ('PIXEL_SPRITE_ANIMAL', 'Pixel Sprite Animal'), ('LOWPOLY_GEOMETRIC', 'Low-Poly Geometric'), ('PAPERCUT_LAYER_ART', 'Papercut Layer Art'), ('TOTEM_MYTHOLOGICAL', 'Totem / Mythological'), ('UKIYOE_WOODBLOCK', 'Ukiyo-e Woodblock'), ('PENCIL_GRAPHITE', 'Pencil / Graphite'), ('PASTEL_POSTER', 'Pastel Poster'), ('SILKSCREEN_PRINT', 'Silkscreen Print'), ('GEOMETRIC_ABSTRACTION', 'Geometric Abstraction'), ('ART_DECO_TRAVEL_POSTER', 'Art Deco Travel Poster'), ('WATERCOLOR_WASH', 'Watercolor Wash'), ('CHARCOAL_DRAWING', 'Charcoal Drawing'), ('NOIR_COMIC_SCENE', 'Noir Comic Scene'), ('CYBERPUNK_POSTER', 'Cyberpunk Poster'), ('SILKSCREEN_SKYLINE', 'Silkscreen Skyline'), ('ISOMETRIC_PIXEL_CITY', 'Isometric Pixel City'), ('CONSTRUCTIVIST_POSTER', 'Constructivist Poster'), ('WATERCOLOR_CITYSCAPE', 'Watercolor Cityscape'), ('VECTOR_FLAT_ILLUSTRATION', 'Vector Flat Illustration'), ('BLUEPRINT_TECHNICAL', 'Blueprint / Technical'), ('WOODCUT_ENGRAVING', 'Woodcut Engraving'), ('ART_DECO_ARCHITECTURAL_POSTER', 'Art Deco Architectural Poster'), ('POP_MINIMALISM', 'Pop Minimalism'), ('SURREALIST_DECONSTRUCTION', 'Surrealist Deconstruction'), ('STAINED_GLASS_STYLE', 'Stained Glass Style'), ('LINEART_SKETCH', 'Lineart Sketch'), ('BOTANICAL_PLATE', 'Botanical Plate'), ('INK_WASH_PAINTING', 'Ink Wash Painting'), ('STENCIL_LEAVES', 'Stencil Leaves'), ('CUTPAPER_COLLAGE', 'Cut-Paper Collage'), ('ETCHING_COPPERPLATE', 'Etching / Copperplate'), ('OUTLINE_WITH_COLOR', 'Outline with Color'), ('ART_NOUVEAU_FLORAL', 'Art Nouveau Floral'), ('BAUHAUS_POSTER', 'Bauhaus Poster'), ('SUPREMATISM_MINIMAL_SHAPES', 'Suprematism (Minimal Shapes)'), ('OP_ART_HIGH_CONTRAST', 'Op-Art High Contrast'), ('DUOTONE_POSTER', 'Duotone Poster'), ('PATENT_LINE_DRAWING', 'Patent Line Drawing'), ('VINTAGE_PRODUCT_POSTER', 'Vintage Product Poster'), ('ISOMETRIC_PIXEL_OBJECT', 'Isometric Pixel Object')], default=None, max_length=64, null=True)),
                ('source_quality', models.CharField(choices=[('NOT_SUITED', 'Not suited'), ('BAD', 'Bad'), ('PASSABLE', 'Passable'), ('GOOD', 'Good'), ('VERY_GOOD', 'Very good')])),
                ('content_type', models.CharField(choices=[('PERSON', 'Person'), ('PEOPLE', 'People'), ('ANIMAL', 'Animal'), ('LANDSCAPE', 'Landscape'), ('CITY', 'City'), ('BUILDING', 'Building'), ('NATURE', 'Nature'), ('ART', 'Art'), ('OBJECT', 'Object'), ('OTHER', 'Other')])),
                ('photorealist', models.BooleanField()),
                ('favourite', models.BooleanField()),
                ('score', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rendered_assets', to='dashboard.sourceimage')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid_time', models.DateTimeField(db_index=True)),
                ('temperature_c', models.DecimalField(decimal_places=2, max_digits=5)),
                ('precip_mm', models.DecimalField(decimal_places=2, max_digits=6)),
                ('wind_ms', models.DecimalField(decimal_places=2, max_digits=5)),
                ('wind_gust_ms', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('cloud_cover_pct', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('rh_pct', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mslp_hpa', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.location')),
            ],
            options={
                'ordering': ['location', 'valid_time'],
                'indexes': [models.Index(fields=['location', 'valid_time'], name='dashboard_w_locatio_3901d4_idx')],
                'unique_together': {('location', 'valid_time')},
            },
        ),
    ]
